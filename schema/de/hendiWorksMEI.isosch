<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2023-02-15T13:43:18Z by 'extract-isosch.xsl'. -->
   <!-- ********************* -->
   <!-- namespaces, declared: -->
   <!-- ********************* -->
   <ns uri="https://henze-digital.de/ns/xslt-functions" prefix="hendi-xsl"/>
   <ns uri="https://henze-digital.de/ns/xslt-functions" prefix="hendi-xsl"/>
   <ns uri="http://www.functx.com" prefix="functx"/>
   <ns prefix="mei" uri="http://www.music-encoding.org/ns/mei"/>
   <!-- ********************* -->
   <!-- namespaces, implicit: -->
   <!-- ********************* -->
   <!-- ************ -->
   <!-- constraints: -->
   <!-- ************ -->
   <pattern id="isoschematron-constraint-hendiWorksMEI-att.notationType-notationsubtype-When_notationsubtype-1">
      <rule context="mei:*[@notationsubtype]">
         <assert test="@notationtype">An element with a notationsubtype attribute must have
                a notationtype attribute.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-manifestation-id-check-2">
      <rule context="mei:manifestation">
         <assert test="@xml:id or ancestor::mei:manifestation">
							Am Wurzelelement muss eine XML-ID angegeben sein.
						</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-manifestation-id-check-3">
      <rule context="mei:manifestation">
         <assert test="@xml:id or ancestor::mei:manifestation">
                        Am Wurzelelement muss eine XML-ID angegeben sein.
                    </assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-manifestation-check_singleton-4">
      <rule context="mei:manifestation[@singleton eq 'true']">
         <assert test="not(mei:itemList)">Item children are not permitted when @singleton
            equals "true".</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-componentList-checkComponentList-5">
      <rule context="mei:componentList">
         <assert test="every $i in ./child::mei:*[not(local-name()='head')] satisfies              $i/local-name() eq ./parent::mei:*/local-name()">Only child elements of the same name as the parent of the componentList are
            allowed.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-componentList-checkComponents-6">
      <rule context="mei:componentList[mei:*[@comptype]]">
         <assert role="warning"
                 test="count(mei:*[@comptype]) = count(mei:*[local-name() ne 'head'])">When any child
            element has a comptype attribute, it is recommended that comptype appear on all child
            elements.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-altId-types-match-external-identifiers-7">
      <rule context="mei:altId[@type='gnd']">
         <assert test="matches(., '^1[01]?\d{7}[0-9X]|[47]\d{6}-\d|[1-9]\d{0,7}-[0-9X]|3\d{7}[0-9X]$')">That doesn't look like a valid GND ID.</assert>
      </rule>
      <rule context="mei:altId[@type='wikidata']">
         <assert test="matches(., '^Q[1-9]\d*$')">That doesn't look like a valid Wikidata ID.</assert>
      </rule>
      <rule context="mei:altId[@type='dracor.einakter']">
         <assert test="matches(., '^ein[0-9]{6}$')">That doesn't look like a valid DraCor Einakter ID.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-altId-types-match-external-identifiers-8">
      <rule context="mei:altId[@type='gnd']">
         <assert test="matches(., '^1[01]?\d{7}[0-9X]|[47]\d{6}-\d|[1-9]\d{0,7}-[0-9X]|3\d{7}[0-9X]$')">That doesn't look like a valid GND ID.</assert>
      </rule>
      <rule context="mei:altId[@type='wikidata']">
         <assert test="matches(., '^Q[1-9]\d*$')">That doesn't look like a valid Wikidata ID.</assert>
      </rule>
      <rule context="mei:altId[@type='dracor.einakter']">
         <assert test="matches(., '^ein[0-9]{6}$')">That doesn't look like a valid DraCor Einakter ID.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-change-check_change-9">
      <rule context="mei:change">
         <assert test="@isodate or mei:date">The date of the change must be recorded in an
            isodate attribute or date element.</assert>
         <assert test="@resp or mei:respStmt[mei:name or mei:corpName or mei:persName]"
                 role="warning">It is recommended that the agent responsible for the change be recorded
            in a resp attribute or in a name, corpName, or persName element in the respStmt
            element.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-handList-checkHandListLabels-10">
      <rule context="mei:handList[mei:label]">
         <assert role="warning" test="count(mei:label) = count(mei:hand)">When labels are used,
            usually each hand has one.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-history-history_restriction-11">
      <rule context="mei:history[parent::mei:work or parent::mei:expression]">
         <assert test="not(mei:acquisition or mei:provenance)">The acquisition and provenance
            elements are not permitted in the work or expression context.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-meiHead-check_meiHead_type-12">
      <rule context="mei:meiHead[@type eq 'music']">
         <assert test="ancestor::mei:mei">The meiHead type attribute can have the value 'music'
            only when the document element is "mei".</assert>
      </rule>
      <rule context="mei:meiHead[@type eq 'corpus']">
         <assert test="ancestor::mei:meiCorpus">The meiHead type attribute can have the value
            'corpus' only when the document element is "meiCorpus".</assert>
      </rule>
      <rule context="mei:meiHead[@type eq 'independent']">
         <assert test="not(ancestor::mei:*)">The meiHead type attribute can have the value
            'independent' only when the document element is "meiHead".</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-termList-checkTermListLabels-13">
      <rule context="mei:termList[mei:label]">
         <assert role="warning" test="count(mei:label) = count(mei:term)">When labels are used,
            usually each term has one.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-titleStmt-multiple-same-language-titles-14">
      <rule context="mei:titleStmt[not(@analog)]">
         <report test="some $title in mei:title[not(@type)] satisfies ($title/string(@xml:lang) = $title/following-sibling::mei:title[not(@type)]/string(@xml:lang))">Multiple title with the same xml:lang detected</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-titleStmt-multiple-same-language-titles-15">
      <rule context="mei:titleStmt[not(@analog)]">
         <report test="some $title in mei:title[not(@type)] satisfies ($title/string(@xml:lang) = $title/following-sibling::mei:title[not(@type)]/string(@xml:lang))">Multiple title with the same xml:lang detected</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-work-lyrAndLibrPresent-16">
      <rule context="mei:work | mei:expression">
         <report test="mei:lyricist and mei:librettist" role="info">This work has a lyricist AND a librettist.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-work-mei-work-status-17">
      <rule context="mei:mei|mei:work[not(parent::mei:componentList) and not(parent::mei:workList)]">
         <assert test="@status">@status is missing.</assert>
      </rule>
      <rule context="mei:work[parent::mei:componentList or parent::mei:workList]">
         <report test="@status">@status is only for use at the root element.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-work-mei-work-source-18">
      <rule context="mei:mei|mei:work[not(parent::mei:componentList) and not(parent::mei:workList)]">
         <assert test="@source">@source is missing.</assert>
      </rule>
      <rule context="mei:work[parent::mei:componentList or parent::mei:workList]">
         <report test="@source">@source is only for use at the root element.</report>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-att.cleffing.log-clef_shape_requires_clef_line-19">
      <rule context="mei:*[matches(@clef.shape, '[FCG]')]">
         <assert test="@clef.line">An 'F', 'C', or 'G' clef requires that its position be
            specified.</assert>
      </rule>
      <rule context="mei:*[matches(@clef.shape, '(TAB|perc)')]">
         <assert test="@lines">A TAB or percussion clef requires that the number of lines be
            specified.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-annot-Check_annot_data-20">
      <rule context="mei:annot[@data]">
         <assert test="ancestor::mei:notesStmt">The @data attribute may only occur on an
            annotation within the notesStmt element.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-creation-check_creationDateHasText-21">
      <rule context="mei:creation">
         <assert test="mei:date/text()">The creation date should have human readable text as content.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-creation-check_creationDateHasText-22">
      <rule context="mei:creation">
         <assert test="mei:date/text()">The creation date should have human readable text as content.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-date-dateHeuristics1-23">
      <rule context="mei:date">
         <report test="(@notbefore gt @notafter) and not(starts-with(@notbefore, '-'))">value of notBefore greater than notAfter</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-date-dateHeuristics3-24">
      <rule context="mei:date">
         <report test="(@startdate or @enddate) and (@isodate or @notafter or @notbefore)">cooccurence of date and duration attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-date-dateHeuristics4-25">
      <rule context="mei:date">
         <report test="@isodate and (@notafter or @notbefore)">cooccurence of exact and uncertain date attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-date-dateHeuristics5-26">
      <rule context="mei:date">
         <assert test="@isodate or @notbefore or @notafter or @startdate or @enddate or @cert='unknown' or matches(., '0000|o\.J\.|unknown')">mei:date benötigt ein Attribut @isodate, @notbefore o.ä.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-date-dateHeuristics1-27">
      <rule context="mei:date">
         <report test="(@notbefore gt @notafter) and not(starts-with(@notbefore, '-'))">value of notBefore greater than notAfter</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-date-dateHeuristics3-28">
      <rule context="mei:date">
         <report test="(@startdate or @enddate) and (@isodate or @notafter or @notbefore)">cooccurence of date and duration attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-date-dateHeuristics4-29">
      <rule context="mei:date">
         <report test="@isodate and (@notafter or @notbefore)">cooccurence of exact and uncertain date attributes</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-date-dateHeuristics5-30">
      <rule context="mei:date">
         <assert test="@isodate or @notbefore or @notafter or @startdate or @enddate or @cert='unknown' or matches(., '0000|o\.J\.|unknown')">mei:date benötigt ein Attribut @isodate, @notbefore o.ä.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-dimensions-check_dimensions-31">
      <rule context="mei:physDesc/mei:dimensions">
         <assert test="not(count(mei:depth) &gt; 1)">The depth element may only appear
            once.</assert>
         <assert test="not(count(mei:height) &gt; 1)">The height element may only appear
            once.</assert>
         <assert test="not(count(mei:width) &gt; 1)">The width element may only appear
            once.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-mei-Check_staff-32">
      <rule context="mei:*[@staff]">
         <assert test="every $i in tokenize(normalize-space(@staff), '\s+') satisfies $i=//mei:staffDef/@n">The values in @staff must correspond to @n attribute of a staffDef
            element.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-relation-FRBR_relation-33">
      <rule context="mei:relationList/mei:relation[parent::mei:work or parent::mei:expression or                        parent::mei:source or parent::mei:item]">
         <assert test="matches(@rel, 'hasAbridgement') or             matches(@rel, 'hasAbridgement') or             matches(@rel, 'isAbridgementOf') or             matches(@rel, 'hasAdaptation') or             matches(@rel, 'isAdaptationOf') or             matches(@rel, 'hasAlternate') or             matches(@rel, 'isAlternateOf') or             matches(@rel, 'hasArrangement') or             matches(@rel, 'isArrangementOf') or             matches(@rel, 'hasComplement') or             matches(@rel, 'isComplementOf') or             matches(@rel, 'hasEmbodiment') or             matches(@rel, 'isEmbodimentOf') or             matches(@rel, 'hasExemplar') or             matches(@rel, 'isExemplarOf') or             matches(@rel, 'hasImitation') or             matches(@rel, 'isImitationOf') or             matches(@rel, 'hasPart') or             matches(@rel, 'isPartOf') or             matches(@rel, 'hasRealization') or             matches(@rel, 'isRealizationOf') or             matches(@rel, 'hasReconfiguration') or             matches(@rel, 'isReconfigurationOf') or             matches(@rel, 'hasReproduction') or             matches(@rel, 'isReproductionOf') or             matches(@rel, 'hasRevision') or             matches(@rel, 'isRevisionOf') or             matches(@rel, 'hasSuccessor') or             matches(@rel, 'isSuccessorOf') or             matches(@rel, 'hasSummarization') or             matches(@rel, 'isSummarizationOf') or             matches(@rel, 'hasSupplement') or             matches(@rel, 'isSupplementOf') or             matches(@rel, 'hasTransformation') or             matches(@rel, 'isTransformationOf') or             matches(@rel, 'hasTranslation') or             matches(@rel, 'isTranslationOf')">Within work, expression, source, or item, the value of the rel attribute must match one
            of the following: hasAbridgement, isAbridgementOf, hasAdaptation, isAdaptationOf,
            hasAlternate, isAlternateOf, hasArrangement, isArrangementOf, hasComplement,
            isComplementOf, hasEmbodiment, isEmbodimentOf, hasExemplar, isExemplarOf, hasImitation,
            isImitationOf, hasPart, isPartOf, hasRealization, isRealizationOf, hasReconfiguration,
            isReconfigurationOf, hasReproduction, isReproductionOf, hasRevision, isRevisionOf,
            hasSuccessor, isSuccessorOf, hasSummarization, isSummarizationOf, hasSupplement,
            isSupplementOf, hasTransformation, isTransformationOf, hasTranslation,
            isTranslationOf</assert>
         <assert test="@target">Within work, expression, source or item, the target attribute
            must be present.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-section-Check_sectionexpansion-34">
      <rule context="mei:section[mei:expansion]">
         <assert test="descendant::mei:section|descendant::mei:ending|descendant::mei:rdg">A
            section containing an expansion element must have descendant section, ending, or rdg
            elements.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-staffDef-Check_staffDefn-35">
      <rule context="mei:staffDef[not(ancestor::mei:staff)]">
         <let name="thisstaff" value="@n"/>
         <assert test="@n">StaffDef must have an n attribute.</assert>
         <assert test="@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"> Either
            @lines must be present or a preceding staffDef with the same value for @n and @lines
            must exist.</assert>
         <assert test="count(mei:clef) + count(mei:clefGrp) &lt; 2">Only one clef or clefGrp is
            permitted.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-staffDef-Check_ancestor_staff-36">
      <rule context="mei:staffDef[ancestor::mei:staff and @n]">
         <let name="thisstaff" value="@n"/>
         <assert test="ancestor::mei:staff/@n eq $thisstaff">@n must have the same value as the
            current staff.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-staffDef-Check_ancestor_staff_lines-37">
      <rule context="mei:staffDef[ancestor::mei:staff and not(@n)]">
         <let name="thisstaff" value="ancestor::mei:staff/@n"/>
         <assert test="@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"> Either
            @lines must be present or a preceding staffDef with matching @n value and @lines must
            exist.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-staffDef-Check_clef_position_staffDef-38">
      <rule context="mei:staffDef[@clef.line and @lines]">
         <assert test="number(@clef.line) &lt;= number(@lines)">The clef position must be less
            than or equal to the number of lines on the staff.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-staffDef-Check_clef_position_staffDef_nolines-39">
      <rule context="mei:staffDef[@clef.line and not(@lines)]">
         <let name="thisstaff" value="@n"/>
         <let name="stafflines"
              value="preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines"/>
         <assert test="number(@clef.line) &lt;= number($stafflines)">The clef position must be
            less than or equal to the number of lines on the staff.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-staffDef-Check_tab_strings_lines-40">
      <rule context="mei:staffDef[@tab.strings and @lines]">
         <let name="countTokens"
              value="count(tokenize(normalize-space(@tab.strings), '\s'))"/>
         <assert test="$countTokens = @lines">The tab.strings attribute must have the same
            number of values as there are staff lines.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-staffDef-Check_tab_strings_nolines-41">
      <rule context="mei:staffDef[@tab.strings and not(@lines)]">
         <let name="countTokens"
              value="count(tokenize(normalize-space(@tab.strings), '\s'))"/>
         <let name="thisstaff" value="@n"/>
         <assert test="$countTokens = preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines">The
            tab.strings attribute must have the same number of values as there are staff
            lines.</assert>
      </rule>
   </pattern>
   <pattern>
      <rule context="mei:staffDef[@lines.color and @lines]">
         <let name="countTokens"
              value="count(tokenize(normalize-space(@lines.color), '\s'))"/>
         <assert test="$countTokens = 1 or $countTokens = @lines">The lines.color attribute
              must have either 1) a single value or 2) the same number of values as there are staff
              lines.</assert>
      </rule>
      <rule context="mei:staffDef[@lines.color and not(@lines)]">
         <let name="countTokens"
              value="count(tokenize(normalize-space(@lines.color), '\s'))"/>
         <let name="thisstaff" value="@n"/>
         <assert test="$countTokens = 1 or $countTokens = preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines">The lines.color attribute must have either 1) a single value or 2) the same number of
              values as there are staff lines.</assert>
      </rule>
   </pattern>
   <pattern>
      <rule context="mei:staffDef[@ppq][ancestor::mei:scoreDef[@ppq]]">
         <let name="staffPPQ" value="@ppq"/>
         <let name="scorePPQ" value="ancestor::mei:scoreDef[@ppq][1]/@ppq"/>
         <assert test="($scorePPQ mod $staffPPQ) = 0">The value of ppq must be a factor of
              the value of ppq on an ancestor scoreDef.</assert>
      </rule>
   </pattern>
   <pattern>
      <rule context="mei:staffDef[@ppq][preceding::mei:scoreDef[@ppq]]">
         <let name="staffPPQ" value="@ppq"/>
         <let name="scorePPQ" value="preceding::mei:scoreDef[@ppq][1]/@ppq"/>
         <assert test="($scorePPQ mod $staffPPQ) = 0">The value of ppq must be a factor of
              the value of ppq on a preceding scoreDef.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-staffGrp-Check_staffGrp_unique_staff_n_values-45">
      <rule context="mei:staffGrp">
         <let name="countstaves" value="count(descendant::mei:staffDef)"/>
         <let name="countuniqstaves"
              value="count(distinct-values(descendant::mei:staffDef/@n))"/>
         <assert test="$countstaves eq $countuniqstaves">Each staffDef must have a unique value
            for the n attribute.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-term-Check_term_dataTarget-46">
      <rule context="mei:term[@data]">
         <assert test="ancestor::mei:classification">The @data attribute may only occur on a
            term which is a descendant of a classification element.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-title-work-subtitles-map-xmllang-47">
      <rule context="mei:title[@type='sub'][parent::mei:titleStmt]">
         <assert test="string(@xml:lang) = preceding-sibling::mei:title/string(@xml:lang)">Make sure that this subtitle has a proper xml:lang attribute matching a preceding title's xml:lang</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-title-type-or-codedval-48">
      <rule context="mei:title">
         <report test="@codedval and @type">type and codedval attribute found! A title should either refer to an entity by the codedval attribute or be further refined by the type attribute</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-title-work-titles-work-49">
      <rule context="mei:title[parent::mei:work]">
         <report test="@type">The attribute type is not recommended for titles on work level.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-title-work-subtitles-map-xmllang-50">
      <rule context="mei:title[@type='sub'][parent::mei:titleStmt]">
         <assert test="string(@xml:lang) = preceding-sibling::mei:title/string(@xml:lang)">Make sure that this subtitle has a proper xml:lang attribute matching a preceding title's xml:lang</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-title-type-or-codedval-51">
      <rule context="mei:title">
         <report test="@codedval and @type">type and codedval attribute found! A title should either refer to an entity by the codedval attribute or be further refined by the type attribute</report>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-contents-checkContentsLabels-52">
      <rule context="mei:contents[mei:label]">
         <assert role="warning" test="count(mei:label) = count(mei:contentItem)">When labels
            are used, usually each content item has one.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-contributor-check_contributor_role-53">
      <rule context="mei:contributor">
         <assert test="not(matches(normalize-space(lower-case(@role)),               '(arranger|author|composer|contributor|editor|funder|librettist|lyricist|sponsor)'))">The value of @role must not contain the name of another element available in this
            context.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-biblList-checkBiblLabels-54">
      <rule context="mei:biblList[mei:label]">
         <assert role="warning" test="count(mei:label) = count(mei:bibl)">When labels are used,
            usually each bibliographic item has one.</assert>
      </rule>
   </pattern>
   <pattern id="isoschematron-constraint-hendiWorksMEI-list-list_type_constraint-55">
      <rule context="mei:list[contains(@type,'gloss')]">
         <assert test="count(mei:label) = count(mei:li)">In a list of type "gloss" all items
            must be immediately preceded by a label.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-styleguide-document-node-content-56">
      <rule context="document-node()">
         <report test="count(processing-instruction()) ne 2">Henze-Digital styleguide error: there should exactly be two processing instructions before the root element</report>
         <report test="comment()">Henze-Digital styleguide error: there should be no comments outside the root element</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-whitespaceOnlyContent-57">
      <rule context="tei:surname | tei:forename | tei:persName | mei:persName | tei:orgName | mei:corpName | tei:author[not(@sameAs)] | tei:occupation | tei:settlement | tei:country | tei:region | tei:rs | tei:workName | tei:characterName | tei:hi[not(.//tei:gap)] | tei:head | tei:note[not(@type=('thematicCom'))] | tei:placeName | tei:title | tei:seg | tei:item[not(@* or *)] | tei:term">
         <report test="normalize-space(.) = ''">
            <name/> has whitespace only content</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-elementStartsWithWhitespace-58">
      <rule context="tei:surname[not(./child::element())] | tei:forename | tei:persName[not(@type)][not(./child::element())] | tei:author | tei:occupation | tei:settlement[not(tei:address)][not(./child::element())] | tei:country | tei:region | tei:rs[not(./child::element())] | tei:workName | tei:characterName | tei:hi[@rend[not(.='underline' and ancestor::tei:TEI//tei:handNote[1]/@script = 'typescript')]] | tei:placeName[not(parent::tei:address or parent::tei:birth or parent::tei:death)][not(./child::element())]">
         <report test="matches(.,'^\s') and (node()[1] = text()[1]) and not(node()[2])"
                 role="error">Caution: whitespace at the beginning of &lt;<name/>&gt;</report>
         <report test="matches(.,'^\s') and (node()[1] = text()[1]) and node()[2] and not(matches(text()[1],'^\s+$'))"
                 role="error">Caution: whitespace at the beginning of &lt;<name/>&gt;</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-hiRendUnderlineStartsWithWhitespace-59">
      <rule context="tei:hi[@rend='underline' and ancestor::tei:TEI//tei:handNote[1]/@script = 'typescript']">
         <report test="matches(.,'^\s') and (node()[1] = text()[1]) and not(node()[2])"
                 role="warning">Caution: the whitespace will be rendered. Be sure that this is your intention!</report>
         <report test="matches(.,'^\s') and (node()[1] = text()[1]) and node()[2] and not(matches(text()[1],'^\s+$'))"
                 role="warning">Caution: the whitespace will be rendered. Be sure that this is your intention!</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-untrimmedAttributeValues-60">
      <rule context="*">
         <report test="some $i in @* satisfies string-length(normalize-unicode(normalize-space(replace($i, ' | | | ', ' ')))) ne string-length($i)">There is some whitespace here at the beginning or end of some attribute value.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-hendiTargets-61">
      <rule context="*[starts-with(@target, 'hendi:')]">
         <assert test="matches(@target, '^hendi:A\d{2}[0-9A-F]{5}(#.+)?(\s+hendi:A\d{2}[0-9A-F]{5}(#.+)?)*$')">"hwh"-prefixed URIs must follow the pattern "hendi:A\d{2}[0-9A-F]{5}" (i.e. without any file extension)</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-emojiCheck-62">
      <rule context="*[some $i in text() satisfies normalize-space($i) ne '']">
         <report test="matches(.,                         '[⌚-⌛]|[⏩-⏬]|[⏰]|[⏳]|[◽-◾]|[☔-☕]|[♈-♓]|[♿]|[⚓]|[⚡]|[⚪-⚫]|[⚽-⚾]|[⛄-⛅]|[⛎]|[⛔]|[⛪]|[⛲-⛳]|[⛵]|[⛺]|[⛽]|[✅]|[✊-✋]|[✨]|[❌]|[❎]|[❓-❕]|[❗]|[➕-➗]|[➰]|[➿]|[⬛-⬜]|[⭐]|[⭕]|[🀄]|[🃏]|[🆎]|[🆑-🆚]|[🇦-🇿]|[🈁]|[🈚]|[🈯]|[🈲-🈶]|[🈸-🈺]|[🉐-🉑]|[🌀-🌠]|[🌭-🌯]|[🌰-🌵]|[🌷-🍼]|[🍾-🍿]|[🎀-🎓]|[🎠-🏄]|[🏅]|[🏆-🏊]|[🏏-🏓]|[🏠-🏰]|[🏴]|[🏸-🏿]|[🐀-🐾]|[👀]|[👂-📷]|[📸]|[📹-📼]|[📿]|[🔀-🔽]|[🕋-🕎]|[🕐-🕧]|[🕺]|[🖕-🖖]|[🖤]|[🗻-🗿]|[😀]|[😁-😐]|[😑]|[😒-😔]|[😕]|[😖]|[😗]|[😘]|[😙]|[😚]|[😛]|[😜-😞]|[😟]|[😠-😥]|[😦-😧]|[😨-😫]|[😬]|[😭]|[😮-😯]|[😰-😳]|[😴]|[😵-🙀]|[🙁-🙂]|[🙃-🙄]|[🙅-🙏]|[🚀-🛅]|[🛌]|[🛐]|[🛑-🛒]|[🛕]|[🛫-🛬]|[🛴-🛶]|[🛷-🛸]|[🛹]|[🛺]|[🟠-🟫]|[🤍-🤏]|[🤐-🤘]|[🤙-🤞]|[🤟]|[🤠-🤧]|[🤨-🤯]|[🤰]|[🤱-🤲]|[🤳-🤺]|[🤼-🤾]|[🤿]|[🥀-🥅]|[🥇-🥋]|[🥌]|[🥍-🥏]|[🥐-🥞]|[🥟-🥫]|[🥬-🥰]|[🥱]|[🥳-🥶]|[🥺]|[🥻]|[🥼-🥿]|[🦀-🦄]|[🦅-🦑]|[🦒-🦗]|[🦘-🦢]|[🦥-🦪]|[🦮-🦯]|[🦰-🦹]|[🦺-🦿]|[🧀]|[🧁-🧂]|[🧃-🧊]|[🧍-🧏]|[🧐-🧦]|[🧧-🧿]|[🩰-🩳]|[🩸-🩺]|[🪀-🪂]|[🪐-🪕]')">Text contains characters with Emoji presentation as default.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-sourceMustResolve-63">
      <rule context="*[starts-with(@source, '#')]">
         <let name="source" value="@source"/>
         <assert test="id(substring($source,2))">Unable to locate the reference provided by the @source attribute.</assert>
      </rule>
   </pattern>
   <schema queryBinding="xslt2">
      <function xmlns="http://www.w3.org/1999/XSL/Transform" name="hendi-xsl:int2hex">
         <param name="number" as="xs:int"/>
         <variable name="chars"
                   select="('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')"/>
         <variable name="div" select="$number div 16"/>
         <variable name="count" select="floor($div)"/>
         <variable name="remainder" select="($div - $count) * 16"/>
         <value-of select="concat(if($count gt 15) then hendi-xsl:int2hex(xs:integer($count))                             else if($number gt 15) then $chars[$count +1]                             else (),                             $chars[$remainder +1])"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="hendi-xsl:compute-check-digit">
         <param name="id" as="xs:string"/>
         <variable name="weights" select="(2, 4, 6, 8, 9, 5, 3)"/>
         <variable name="str2codepts" select="string-to-codepoints($id)"/>
         <variable name="str2codepts-1" select="$str2codepts[1] * $weights[1]"/>
         <variable name="str2codepts-2" select="$str2codepts[2] * $weights[2]"/>
         <variable name="str2codepts-3" select="$str2codepts[3] * $weights[3]"/>
         <variable name="str2codepts-4" select="$str2codepts[4] * $weights[4]"/>
         <variable name="str2codepts-5" select="$str2codepts[5] * $weights[5]"/>
         <variable name="str2codepts-6" select="$str2codepts[6] * $weights[6]"/>
         <variable name="str2codepts-7" select="$str2codepts[7] * $weights[7]"/>
         <variable name="sum"
                   select="sum(($str2codepts-1, $str2codepts-2, $str2codepts-3, $str2codepts-4, $str2codepts-5, $str2codepts-6, $str2codepts-7))"/>
         <value-of select="hendi-xsl:int2hex(xs:int($sum mod 16))"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="hendi-xsl:checkIdByCheckDigit">
         <param name="str" as="xs:string"/>
         <variable name="idStr" select="substring($str, 1, 7)"/>
         <variable name="idCheckDigit" select="substring($str, 8, 1)"/>
         <variable name="computedCheckDigit"
                   select="hendi-xsl:compute-check-digit($idStr)"/>
         <variable name="check" select="$computedCheckDigit = $idCheckDigit"/>
         <value-of select="$check"/>
      </function>
      <pattern id="idCheckDigit">
         <rule context="@key | @xml:id[not(parent::tei:layout) and not(parent::tei:handNote) and not(parent::tei:foreign) and not(parent::tei:div)] | @sameAs | @codedval[not(parent::mei:language)] | tei:ref[@type='deletion' or @type='duplicate']/@target | @scribe">
            <assert test="hendi-xsl:checkIdByCheckDigit(.) = true()" role="fatal">Something went wrong with the ID: <value-of select="."/>. Computed check digit is <value-of select="hendi-xsl:compute-check-digit(.)"/>.</assert>
         </rule>
      </pattern>
   </schema>
   <schema queryBinding="xslt2">
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:escape-for-regex"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <sequence select="replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1')"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:substring-before-last"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <param name="delim" as="xs:string"/>
         <sequence select="if (matches($arg, functx:escape-for-regex($delim))) then replace($arg, concat('^(.*)', functx:escape-for-regex($delim),'.*'), '$1') else ''"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:substring-after-last"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <param name="delim" as="xs:string"/>
         <sequence select="replace ($arg,concat('^.*', functx:escape-for-regex($delim)),'')"/>
      </function>
      <pattern id="checkFilesNameAndDir">
         <rule context="root()">
            <let name="docUri" value="document-uri(.)"/>
            <let name="fileName"
                 value="functx:substring-after-last(substring-before($docUri, '.xml'), '/')"/>
            <let name="fileDir"
                 value="functx:substring-after-last(functx:substring-before-last($docUri, '/'), '/')"/>
            <assert test="./node()/@xml:id = $fileName" role="error">The id of this record does not match the files name. Please check!</assert>
            <assert test="$fileDir = concat(substring($fileName,1,5),'xxx')" role="error">The file is stored in the wrong directory. Please check!</assert>
         </rule>
      </pattern>
   </schema>
   <pattern id="schematron-constraint-hendiWorksMEI-addWithoutPlace-66">
      <rule context="tei:add[not(parent::tei:subst)]">
         <assert test="@place">Missing @place, because this is no substitution here.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-nameTypeRequirement-67">
      <rule context="tei:name[not(ancestor::tei:teiHeader)]">
         <assert test="@type">@type is required at <name/>.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-lbInsideAddress-68">
      <rule context="tei:lb">
         <report test="parent::tei:address" role="info">Does <name/> mark a new line inside the address? If yes, please use &lt;addrLine&gt; instead of <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-renditionWithPosition-69">
      <rule context="tei:addrLine[@rend and not(contains(@rend,' '))] | tei:dateline[@rend and not(contains(@rend,' '))]">
         <assert test="@rend = ('right','center','left')">If only one value is set, it should should address the horizontal position ('right','center','left')</assert>
      </rule>
      <rule context="tei:addrLine[@rend] | tei:dateline[@rend]">
         <assert test="tokenize(@rend, ' ')[1] = ('top','middle','bottom','inline')">the first value should address the vertical position ('top','middle','bottom')</assert>
         <assert test="tokenize(@rend, ' ')[2] = ('right','center','left')">the second value should address the horizontal position ('right','center','left')</assert>
      </rule>
   </pattern>
   <pattern id="node-typeNkey" abstract="true">
      <rule context="$node[@type='person'][@key]|$node[@type='character'][@key]|$node[@type='actingRole'][@key]|$node[@type='myth'][@key]">
         <assert test="matches(@key, '^A00[0-9A-F]{5}$')">A type value of 'person' must have only one key, starting with 'A00'</assert>
      </rule>
      <rule context="$node[@type='persons'][@key]|$node[@type='characters'][@key]|$node[@type='actingRoles'][@key]|$node[@type='myths'][@key]">
         <assert test="matches(@key, '^(A00[0-9A-F]{5}\s)*A00[0-9A-F]{5}$')">A type value of 'persons' must have at least one key, each starting with 'A00'</assert>
      </rule>
      <rule context="$node[@type='work'][@key]">
         <assert test="matches(@key, '^A02[0-9A-F]{5}$')">A type value of 'work' must have only one key, starting with 'A02'</assert>
      </rule>
      <rule context="$node[@type='works'][@key]">
         <assert test="matches(@key, '^(A02[0-9A-F]{5}\s)*A02\d{5}$')">A type value of 'works' must have at least one key, each starting with 'A02'</assert>
      </rule>
      <rule context="$node[@type='writing'][@key]">
         <assert test="matches(@key, '^A03[0-9A-F]{5}$')">A type value of 'writing' must have only one key, starting with 'A03'</assert>
      </rule>
      <rule context="$node[@type='writings'][@key]">
         <assert test="matches(@key, '^(A03[0-9A-F]{5}\s)*A03[0-9A-F]{5}$')">A type value of 'writings' must have at least one key, each starting with 'A03'</assert>
      </rule>
      <rule context="$node[@type='postal'][@key]">
         <assert test="matches(@key, '^A04[0-9A-F]{5}$')">A type value of 'letter' must have only one key, starting with 'A04'</assert>
      </rule>
      <rule context="$node[@type='postals'][@key]">
         <assert test="matches(@key, '^(A04[0-9A-F]{5}\s)*A04[0-9A-F]{5}$')">A type value of 'letters' must have at least one key, each starting with 'A04'</assert>
      </rule>
      <rule context="$node[@type='news'][@key]">
         <assert test="matches(@key, '^(A05[0-9A-F]{5}\s)*A05[0-9A-F]{5}$')">A type value of 'news' must have at least one key, starting with 'A05'</assert>
      </rule>
      <rule context="$node[@type='diaryDay'][@key]">
         <assert test="matches(@key, '^A06[0-9A-F]{5}$')">A type value of 'diaryDay' must have only one key, starting with 'A06'</assert>
      </rule>
      <rule context="$node[@type='diaryDays'][@key]">
         <assert test="matches(@key, '^(A06[0-9A-F]{5}\s)*A06[0-9A-F]{5}$')">A type value of 'diaryDays' must have at least one key, each starting with 'A06'</assert>
      </rule>
      <rule context="$node[@type='org'][@key]">
         <assert test="matches(@key, '^A08[0-9A-F]{5}$')">A type value of 'org' must have only one key, starting with 'A08'</assert>
      </rule>
      <rule context="$node[@type='orgs'][@key]">
         <assert test="matches(@key, '^(A08\d{5}\s)*A08\d{5}$')">A type value of 'orgs' must have at least one key, each starting with 'A08'</assert>
      </rule>
      <rule context="$node[@type='document'][@key]">
         <assert test="matches(@key, '^A10\d{5}$')">A type value of 'document' must have only one key, starting with 'A10'</assert>
      </rule>
      <rule context="$node[@type='documents'][@key]">
         <assert test="matches(@key, '^(A10[0-9A-F]{5}\s)*A10[0-9A-F]{5}$')">A type value of 'documents' must have at least one key, each starting with 'A10'</assert>
      </rule>
      <rule context="$node[@type='biblio'][@key]">
         <assert test="matches(@key, '^(A11[0-9A-F]{5}\s)*A11[0-9A-F]{5}$')">A type value of 'biblio' must have at least one key, each starting with 'A11'</assert>
      </rule>
      <rule context="$node[@type='addenda'][@key]">
         <assert test="matches(@key, '^A12[0-9A-F]{5}$')">A type value of 'addenda' must have only one key, starting with 'A12'</assert>
      </rule>
      <rule context="$node[@type='place'][@key] | $node[@type='venue'][@key]">
         <assert test="matches(@key, '^A13[0-9A-F]{5}$')">A type value of 'place' must have only one key, starting with 'A13'</assert>
      </rule>
      <rule context="$node[@type='places'][@key]">
         <assert test="matches(@key, '^(A13[0-9A-F]{5}\s)*A13[0-9A-F]{5}$')">A type value of 'places' must have at least one key, each starting with 'A13'</assert>
      </rule>
      <rule context="$node[@type='mixed'][@key]">
         <assert test="count(distinct-values(for $i in tokenize(@key, '\s+') return substring($i, 1, 3))) gt 1">A type value of 'mixed' must have keys referring to different document types</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-importName-71">
      <rule context="tei:persName | tei:orgName | tei:placeName">
         <report test="(@type='import') and parent::node()/@status[.='proposed']"
                 role="info">This element should be deleted after checking this record.</report>
         <report test="(@type='import') and parent::node()/@status[.='candidate']"
                 role="warning">This element should be deleted after checking this record.</report>
         <report test="(@type='import') and parent::node()/@status[.='approved']"
                 role="error">This element has to be deleted before publishing!</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-quotation-rend-values-72">
      <rule context="*:q[@rend]/@rend | *:quote[@rend]/@rend">
         <report test="contains(.,'none')">The value 'none' is not allowed at <value-of select="node-name()"/>.</report>
      </rule>
      <rule context="*:q[@rendLeft]/@rendLeft | *:quote[@rendLeft]/@rendLeft | *:q[@rendRight]/@rendRight | *:quote[@rendRight]/@rendRight">
         <report test="contains(.,'none') and not(. = 'none')">If the value 'none' is used, no other specification are allowed.</report>
      </rule>
      <rule context="*:q[@rend]/@rend | *:quote[@rend]/@rend | *:q[@rendLeft]/@rendLeft | *:quote[@rendLeft]/@rendLeft | *:q[@rendRight]/@rendRight | *:quote[@rendRight]/@rendRight">
         <report test="(contains(.,'single') and contains(.,'double')) or (contains(., 'up') and contains(.,'down'))">Please check the values at the attriute <value-of select="node-name()"/>.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-quotation-rend-attributes-73">
      <rule context="*:q[@rend] | *:quote[@rend] | *:q[@rendLeft] | *:quote[@rendLeft] | *:q[@rendRight] | *:quote[@rendRight]">
         <report test="(@rend and @rendLeft) or (@rend and @rendLeft)">The attribute rend is not allowed if rendLeft or rendRight is used.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-rendIfBreakNo-75">
      <rule context="tei:lb | tei:pb">
         <assert test="not(@*) or @n or @break or (@break and @rend)">@rend is only allowed if @break is used.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-reportLBfollowsPB-76">
      <rule context="tei:pb">
         <report test=".[following::lb]">A lb-element right after a pb-element is senseless.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiWorksMEI-seriesTitleRequirements-77">
      <rule context="tei:fileDesc/tei:titleStmt/tei:title[@level='s']">
         <let name="seriesTitleA04" value="'Henze-Digital, Briefedition'"/>
         <let name="seriesTitleA05" value="'Aktuelle Nachrichten von Henze-Digital'"/>
         <let name="seriesTitleA02"
              value="'Henze-Digital, literarische Werke, Digitale Edition'"/>
         <report test="ancestor::tei:TEI[starts-with(@xml:id,'A04')] and not(. = $seriesTitleA04)">The correct series title for postals is "<value-of select="$seriesTitleA04"/>".</report>
         <report test="ancestor::tei:TEI[starts-with(@xml:id,'A05')] and not(. = $seriesTitleA05)">The scorrect eries title for News is "<value-of select="$seriesTitleA05"/>".</report>
         <report test="ancestor::tei:TEI[starts-with(@xml:id,'A02')] and not(. = $seriesTitleA02)">The series title must be "<value-of select="$seriesTitleA02"/>".</report>
      </rule>
   </pattern>
</schema>
