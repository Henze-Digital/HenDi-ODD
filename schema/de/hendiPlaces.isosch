<?xml version="1.0" encoding="utf-8"?>
<schema xmlns="http://purl.oclc.org/dsdl/schematron" queryBinding="xslt2">
   <title>ISO Schematron rules</title>
   <!-- This file generated 2023-01-27T07:16:33Z by 'extract-isosch.xsl'. -->
   <!-- ********************* -->
   <!-- namespaces, declared: -->
   <!-- ********************* -->
   <ns uri="https://henze-digital.de/ns/xslt-functions" prefix="hendi-xsl"/>
   <ns uri="https://henze-digital.de/ns/xslt-functions" prefix="hendi-xsl"/>
   <ns uri="http://www.functx.com" prefix="functx"/>
   <ns prefix="mei" uri="http://www.music-encoding.org/ns/mei"/>
   <!-- ********************* -->
   <!-- namespaces, implicit: -->
   <!-- ********************* -->
   <ns prefix="tei" uri="http://www.tei-c.org/ns/1.0"/>
   <!-- ************ -->
   <!-- constraints: -->
   <!-- ************ -->
   <pattern id="schematron-constraint-hendiPlaces-att.datable.w3c-att-datable-w3c-when-1">
      <rule context="tei:*[@when]">
         <report test="@notBefore|@notAfter|@from|@to" role="nonfatal">The @when attribute cannot be used with any other att.datable.w3c attributes.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-att.datable.w3c-att-datable-w3c-from-2">
      <rule context="tei:*[@from]">
         <report test="@notBefore" role="nonfatal">The @from and @notBefore attributes cannot be used together.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-att.datable.w3c-att-datable-w3c-to-3">
      <rule context="tei:*[@to]">
         <report test="@notAfter" role="nonfatal">The @to and @notAfter attributes cannot be used together.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-att.datable-calendar-4">
      <rule context="tei:*[@calendar]">
         <assert test="string-length(.) gt 0"> @calendar indicates one or more systems or calendars to
              which the date represented by the content of this element belongs, but this
              <name/> element has no textual content.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-att.datable-calendar-5">
      <rule context="tei:*[@calendar]">
         <assert test="string-length(.) gt 0"> @calendar indicates one or more systems or calendars to
              which the date represented by the content of this element belongs, but this
              <name/> element has no textual content.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-att.datable-calendar-calendar-6">
      <rule context="tei:*[@calendar]">
         <assert test="string-length(.) gt 0"> @calendar indicates one or more systems or calendars to
              which the date represented by the content of this element belongs, but this
              <name/> element has no textual content.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-att.global.source-source-only_1_ODD_source-7">
      <rule context="tei:*[@source]">
         <let name="srcs" value="tokenize( normalize-space(@source),' ')"/>
         <report test="( self::tei:classRef                                     | self::tei:dataRef                                     | self::tei:elementRef                                     | self::tei:macroRef                                     | self::tei:moduleRef                                     | self::tei:schemaSpec )                                     and                                     $srcs[2]">
                                    When used on a schema description element (like
                                    <value-of select="name(.)"/>), the @source attribute
                                    should have only 1 value. (This one has <value-of select="count($srcs)"/>.)
                                </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-att.typed-subtypeTyped-8">
      <rule context="tei:*[@subtype]">
         <assert test="@type">The <name/> element should not be categorized in detail with @subtype unless also categorized in general with @type</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-idno-types-match-external-identifiers-9">
      <rule context="tei:idno[@type='gnd']">
         <assert test="matches(., '^1[01]?\d{7}[0-9X]|[47]\d{6}-\d|[1-9]\d{0,7}-[0-9X]|3\d{7}[0-9X]$')">That doesn't look like a valid GND ID.</assert>
      </rule>
      <rule context="tei:idno[@type='viaf']">
         <assert test="matches(., '^[1-9]\d(\d{0,7}|\d{17,20})$')">That doesn't look like a valid VIAF ID.</assert>
      </rule>
      <rule context="tei:idno[@type='geonames']">
         <assert test="matches(., '^[1-9][0-9]{0,8}$')">That doesn't look like a valid Geonames ID.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-idno-match-external-identifiers-10">
      <rule context="tei:idno[parent::tei:place]">
         <report test="@type=('bd')">Bach IDs are not meant for places.</report>
         <report test="@type=('gnd')" role="info">There are less GND Identifier for places. Have you tried http://www.geonames.org/ ?</report>
      </rule>
      <rule context="tei:idno[parent::tei:person]">
         <report test="@type=('geonames')">Geonames IDs are not meant for persons.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-placeName-count-modern-names-11">
      <rule context="tei:placeName[@type='modern']">
         <let name="lang" value="string(@xml:lang)"/>
         <report test="following-sibling::tei:placeName[@type='modern'][string(@xml:lang)=$lang]">Only one modern name per xml:lang allowed.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-geo-whitespace-separated-coordinates-12">
      <rule context="tei:geo">
         <assert test="matches(., '^\-?\d+(\.\d+)? \-?\d+(\.\d+)?$')">There must be two coordinates, separated with a whitespace only (no comma!)</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-place-listorg-place-status-13">
      <rule context="tei:place[not(parent::tei:listPlace)]">
         <assert test="@status">@status is missing.</assert>
      </rule>
      <rule context="tei:place[parent::tei:listPlace]">
         <report test="@status">@status is only for use at the root element.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-place-listorg-place-source-14">
      <rule context="tei:place[not(parent::tei:listPlace)]">
         <assert test="@source">@source is missing.</assert>
      </rule>
      <rule context="tei:place[parent::tei:listPlace]">
         <report test="@source">@source is only for use at the root element.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-place-placeName_reg-15">
      <rule context="tei:place">
         <assert test="(tei:placeName[1][@type='reg'] and count(./tei:placeName[@type='reg']) = 1) or tei:ref">tei:place muss (genau) ein placeName@type="reg" enthalten</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-note-translation-notes-corresp-16">
      <rule context="tei:note[parent::tei:notesStmt]">
         <report test="@type='translation' and not(@corresp)" role="fatal">A note that contains a translation must be liked to the original using @corresp.</report>
         <report test="@type='translation' and not(@xml:lang)">The language must be defined with @xml:lang.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-note-note-in-text-17">
      <rule context="tei:note[not(parent::tei:org or parent::tei:place or parent::tei:person or parent::tei:notesStmt or parent::tei:biblStruct or parent::tei:imprint or @type=('addInfo','comment'))]">
         <assert test="@resp">It is required to give a responsibillity (@resp) on note.</assert>
         <assert test="@type">It is required to classify the note with @type.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-note-notesStmt-notes-18">
      <rule context="tei:note[parent::tei:notesStmt]">
         <assert test="@type=('editorial', 'summary', 'thematicCom', 'incipit', 'textConst', 'translation')">Within the notesStmt only 'editorial', 'summary', 'textConst', 'thematicCom' or 'translation' are allowed for @type on note.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-note-text-notes-19">
      <rule context="tei:note[not(parent::tei:notesStmt)]">
         <report test="@type=('editorial', 'summary', 'incipit', 'translation')">The note types 'editorial', 'summary', 'thematicCom' or 'translation' are not allowed within the text section but only in the notesStmt.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-note-corresp-translation-note-ref-20">
      <rule context="tei:note[@type='translation' and @corresp]">
         <assert test="id(substring(@corresp,2))">There must be an element with the xml:id = "<value-of select="substring(@corresp,2)"/>" which is the target of this @corresp.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-whitespaceOnlyContent-21">
      <rule context="tei:surname | tei:forename | tei:persName | mei:persName | tei:orgName | mei:corpName | tei:author[not(@sameAs)] | tei:occupation | tei:settlement | tei:country | tei:region | tei:rs | tei:workName | tei:characterName | tei:hi[not(.//tei:gap)] | tei:head | tei:note[not(@type=('thematicCom'))] | tei:placeName | tei:title | tei:seg | tei:item[not(@* or *)] | tei:term">
         <report test="normalize-space(.) = ''">
            <name/> has whitespace only content</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-elementStartsWithWhitespace-22">
      <rule context="tei:surname[not(./child::element())] | tei:forename | tei:persName[not(@type)][not(./child::element())] | tei:author | tei:occupation | tei:settlement[not(tei:address)][not(./child::element())] | tei:country | tei:region | tei:rs[not(./child::element())] | tei:workName | tei:characterName | tei:hi | tei:placeName[not(parent::tei:address or parent::tei:birth or parent::tei:death)][not(./child::element())]">
         <report test="matches(.,'^\s') and (node()[1] = text()[1]) and not(node()[2])"
                 role="warning">Caution: whitespace at the beginning of &lt;<name/>&gt;</report>
         <report test="matches(.,'^\s') and (node()[1] = text()[1]) and node()[2] and not(matches(text()[1],'^\s+$'))"
                 role="warning">Caution: whitespace at the beginning of &lt;<name/>&gt;</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-untrimmedAttributeValues-23">
      <rule context="*">
         <report test="some $i in @* satisfies string-length(normalize-unicode(normalize-space(replace($i, ' | | | ', ' ')))) ne string-length($i)">There is some whitespace here at the beginning or end of some attribute value.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-hendiTargets-24">
      <rule context="*[starts-with(@target, 'hendi:')]">
         <assert test="matches(@target, '^hendi:A\d{2}[0-9A-F]{5}(#.+)?(\s+hendi:A\d{2}[0-9A-F]{5}(#.+)?)*$')">"hwh"-prefixed URIs must follow the pattern "hendi:A\d{2}[0-9A-F]{5}" (i.e. without any file extension)</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-emojiCheck-25">
      <rule context="*[some $i in text() satisfies normalize-space($i) ne '']">
         <report test="matches(.,                         '[⌚-⌛]|[⏩-⏬]|[⏰]|[⏳]|[◽-◾]|[☔-☕]|[♈-♓]|[♿]|[⚓]|[⚡]|[⚪-⚫]|[⚽-⚾]|[⛄-⛅]|[⛎]|[⛔]|[⛪]|[⛲-⛳]|[⛵]|[⛺]|[⛽]|[✅]|[✊-✋]|[✨]|[❌]|[❎]|[❓-❕]|[❗]|[➕-➗]|[➰]|[➿]|[⬛-⬜]|[⭐]|[⭕]|[🀄]|[🃏]|[🆎]|[🆑-🆚]|[🇦-🇿]|[🈁]|[🈚]|[🈯]|[🈲-🈶]|[🈸-🈺]|[🉐-🉑]|[🌀-🌠]|[🌭-🌯]|[🌰-🌵]|[🌷-🍼]|[🍾-🍿]|[🎀-🎓]|[🎠-🏄]|[🏅]|[🏆-🏊]|[🏏-🏓]|[🏠-🏰]|[🏴]|[🏸-🏿]|[🐀-🐾]|[👀]|[👂-📷]|[📸]|[📹-📼]|[📿]|[🔀-🔽]|[🕋-🕎]|[🕐-🕧]|[🕺]|[🖕-🖖]|[🖤]|[🗻-🗿]|[😀]|[😁-😐]|[😑]|[😒-😔]|[😕]|[😖]|[😗]|[😘]|[😙]|[😚]|[😛]|[😜-😞]|[😟]|[😠-😥]|[😦-😧]|[😨-😫]|[😬]|[😭]|[😮-😯]|[😰-😳]|[😴]|[😵-🙀]|[🙁-🙂]|[🙃-🙄]|[🙅-🙏]|[🚀-🛅]|[🛌]|[🛐]|[🛑-🛒]|[🛕]|[🛫-🛬]|[🛴-🛶]|[🛷-🛸]|[🛹]|[🛺]|[🟠-🟫]|[🤍-🤏]|[🤐-🤘]|[🤙-🤞]|[🤟]|[🤠-🤧]|[🤨-🤯]|[🤰]|[🤱-🤲]|[🤳-🤺]|[🤼-🤾]|[🤿]|[🥀-🥅]|[🥇-🥋]|[🥌]|[🥍-🥏]|[🥐-🥞]|[🥟-🥫]|[🥬-🥰]|[🥱]|[🥳-🥶]|[🥺]|[🥻]|[🥼-🥿]|[🦀-🦄]|[🦅-🦑]|[🦒-🦗]|[🦘-🦢]|[🦥-🦪]|[🦮-🦯]|[🦰-🦹]|[🦺-🦿]|[🧀]|[🧁-🧂]|[🧃-🧊]|[🧍-🧏]|[🧐-🧦]|[🧧-🧿]|[🩰-🩳]|[🩸-🩺]|[🪀-🪂]|[🪐-🪕]')">Text contains characters with Emoji presentation as default.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-sourceMustResolve-26">
      <rule context="*[starts-with(@source, '#')]">
         <let name="source" value="@source"/>
         <assert test="id(substring($source,2))">Unable to locate the reference provided by the @source attribute.</assert>
      </rule>
   </pattern>
   <schema queryBinding="xslt2">
      <function xmlns="http://www.w3.org/1999/XSL/Transform" name="hendi-xsl:int2hex">
         <param name="number" as="xs:int"/>
         <variable name="chars"
                   select="('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F')"/>
         <variable name="div" select="$number div 16"/>
         <variable name="count" select="floor($div)"/>
         <variable name="remainder" select="($div - $count) * 16"/>
         <value-of select="concat(if($count gt 15) then hendi-xsl:int2hex(xs:integer($count))                             else if($number gt 15) then $chars[$count +1]                             else (),                             $chars[$remainder +1])"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="hendi-xsl:compute-check-digit">
         <param name="id" as="xs:string"/>
         <variable name="weights" select="(2, 4, 6, 8, 9, 5, 3)"/>
         <variable name="str2codepts" select="string-to-codepoints($id)"/>
         <variable name="str2codepts-1" select="$str2codepts[1] * $weights[1]"/>
         <variable name="str2codepts-2" select="$str2codepts[2] * $weights[2]"/>
         <variable name="str2codepts-3" select="$str2codepts[3] * $weights[3]"/>
         <variable name="str2codepts-4" select="$str2codepts[4] * $weights[4]"/>
         <variable name="str2codepts-5" select="$str2codepts[5] * $weights[5]"/>
         <variable name="str2codepts-6" select="$str2codepts[6] * $weights[6]"/>
         <variable name="str2codepts-7" select="$str2codepts[7] * $weights[7]"/>
         <variable name="sum"
                   select="sum(($str2codepts-1, $str2codepts-2, $str2codepts-3, $str2codepts-4, $str2codepts-5, $str2codepts-6, $str2codepts-7))"/>
         <value-of select="hendi-xsl:int2hex(xs:int($sum mod 16))"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="hendi-xsl:checkIdByCheckDigit">
         <param name="str" as="xs:string"/>
         <variable name="idStr" select="substring($str, 1, 7)"/>
         <variable name="idCheckDigit" select="substring($str, 8, 1)"/>
         <variable name="computedCheckDigit"
                   select="hendi-xsl:compute-check-digit($idStr)"/>
         <variable name="check" select="$computedCheckDigit = $idCheckDigit"/>
         <value-of select="$check"/>
      </function>
      <pattern id="idCheckDigit">
         <rule context="@key | @xml:id[not(parent::tei:layout) and not(parent::tei:handNote) and not(parent::tei:foreign) and not(parent::tei:div)] | @sameAs | @codedval[not(parent::mei:language)] | tei:ref[@type='deletion' or @type='duplicate']/@target | @scribe">
            <assert test="hendi-xsl:checkIdByCheckDigit(.) = true()" role="fatal">Something went wrong with the ID: <value-of select="."/>. Computed check digit is <value-of select="hendi-xsl:compute-check-digit(.)"/>.</assert>
         </rule>
      </pattern>
   </schema>
   <schema queryBinding="xslt2">
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:escape-for-regex"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <sequence select="replace($arg, '(\.|\[|\]|\\|\||\-|\^|\$|\?|\*|\+|\{|\}|\(|\))','\\$1')"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:substring-before-last"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <param name="delim" as="xs:string"/>
         <sequence select="if (matches($arg, functx:escape-for-regex($delim))) then replace($arg, concat('^(.*)', functx:escape-for-regex($delim),'.*'), '$1') else ''"/>
      </function>
      <function xmlns="http://www.w3.org/1999/XSL/Transform"
                name="functx:substring-after-last"
                as="xs:string">
         <param name="arg" as="xs:string?"/>
         <param name="delim" as="xs:string"/>
         <sequence select="replace ($arg,concat('^.*', functx:escape-for-regex($delim)),'')"/>
      </function>
      <pattern id="checkFilesNameAndDir">
         <rule context="root()">
            <let name="docUri" value="document-uri(.)"/>
            <let name="fileName"
                 value="functx:substring-after-last(substring-before($docUri, '.xml'), '/')"/>
            <let name="fileDir"
                 value="functx:substring-after-last(functx:substring-before-last($docUri, '/'), '/')"/>
            <assert test="./node()/@xml:id = $fileName" role="error">The id of this record does not match the files name. Please check!</assert>
            <assert test="$fileDir = concat(substring($fileName,1,5),'xxx')" role="error">The file is stored in the wrong directory. Please check!</assert>
         </rule>
      </pattern>
   </schema>
   <pattern id="schematron-constraint-hendiPlaces-addWithoutPlace-29">
      <rule context="tei:add[not(parent::tei:subst)]">
         <assert test="@place">Missing @place, because this is no substitution here.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-nameTypeRequirement-30">
      <rule context="tei:name[not(ancestor::tei:teiHeader)]">
         <assert test="@type">@type is required at <name/>.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-lbInsideAddress-31">
      <rule context="tei:lb">
         <report test="parent::tei:address" role="info">Does <name/> mark a new line inside the address? If yes, please use &lt;addrLine&gt; instead of <name/>
         </report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-renditionWithPosition-32">
      <rule context="tei:addrLine[@rend and not(contains(@rend,' '))] | tei:dateline[@rend and not(contains(@rend,' '))]">
         <assert test="@rend = ('right','center','left')">If only one value is set, it should should address the horizontal position ('right','center','left')</assert>
      </rule>
      <rule context="tei:addrLine[@rend] | tei:dateline[@rend]">
         <assert test="tokenize(@rend, ' ')[1] = ('top','middle','bottom','inline')">the first value should address the vertical position ('top','middle','bottom')</assert>
         <assert test="tokenize(@rend, ' ')[2] = ('right','center','left')">the second value should address the horizontal position ('right','center','left')</assert>
      </rule>
   </pattern>
   <pattern id="node-typeNkey" abstract="true">
      <rule context="$node[@type='person'][@key]|$node[@type='character'][@key]|$node[@type='actingRole'][@key]|$node[@type='myth'][@key]">
         <assert test="matches(@key, '^A00[0-9A-F]{5}$')">A type value of 'person' must have only one key, starting with 'A00'</assert>
      </rule>
      <rule context="$node[@type='persons'][@key]|$node[@type='characters'][@key]|$node[@type='actingRoles'][@key]|$node[@type='myths'][@key]">
         <assert test="matches(@key, '^(A00[0-9A-F]{5}\s)*A00[0-9A-F]{5}$')">A type value of 'persons' must have at least one key, each starting with 'A00'</assert>
      </rule>
      <rule context="$node[@type='work'][@key]">
         <assert test="matches(@key, '^A02[0-9A-F]{5}$')">A type value of 'work' must have only one key, starting with 'A02'</assert>
      </rule>
      <rule context="$node[@type='works'][@key]">
         <assert test="matches(@key, '^(A02[0-9A-F]{5}\s)*A02\d{5}$')">A type value of 'works' must have at least one key, each starting with 'A02'</assert>
      </rule>
      <rule context="$node[@type='writing'][@key]">
         <assert test="matches(@key, '^A03[0-9A-F]{5}$')">A type value of 'writing' must have only one key, starting with 'A03'</assert>
      </rule>
      <rule context="$node[@type='writings'][@key]">
         <assert test="matches(@key, '^(A03[0-9A-F]{5}\s)*A03[0-9A-F]{5}$')">A type value of 'writings' must have at least one key, each starting with 'A03'</assert>
      </rule>
      <rule context="$node[@type='postal'][@key]">
         <assert test="matches(@key, '^A04[0-9A-F]{5}$')">A type value of 'letter' must have only one key, starting with 'A04'</assert>
      </rule>
      <rule context="$node[@type='postals'][@key]">
         <assert test="matches(@key, '^(A04[0-9A-F]{5}\s)*A04[0-9A-F]{5}$')">A type value of 'letters' must have at least one key, each starting with 'A04'</assert>
      </rule>
      <rule context="$node[@type='news'][@key]">
         <assert test="matches(@key, '^(A05[0-9A-F]{5}\s)*A05[0-9A-F]{5}$')">A type value of 'news' must have at least one key, starting with 'A05'</assert>
      </rule>
      <rule context="$node[@type='diaryDay'][@key]">
         <assert test="matches(@key, '^A06[0-9A-F]{5}$')">A type value of 'diaryDay' must have only one key, starting with 'A06'</assert>
      </rule>
      <rule context="$node[@type='diaryDays'][@key]">
         <assert test="matches(@key, '^(A06[0-9A-F]{5}\s)*A06[0-9A-F]{5}$')">A type value of 'diaryDays' must have at least one key, each starting with 'A06'</assert>
      </rule>
      <rule context="$node[@type='org'][@key]">
         <assert test="matches(@key, '^A08[0-9A-F]{5}$')">A type value of 'org' must have only one key, starting with 'A08'</assert>
      </rule>
      <rule context="$node[@type='orgs'][@key]">
         <assert test="matches(@key, '^(A08\d{5}\s)*A08\d{5}$')">A type value of 'orgs' must have at least one key, each starting with 'A08'</assert>
      </rule>
      <rule context="$node[@type='document'][@key]">
         <assert test="matches(@key, '^A10\d{5}$')">A type value of 'document' must have only one key, starting with 'A10'</assert>
      </rule>
      <rule context="$node[@type='documents'][@key]">
         <assert test="matches(@key, '^(A10[0-9A-F]{5}\s)*A10[0-9A-F]{5}$')">A type value of 'documents' must have at least one key, each starting with 'A10'</assert>
      </rule>
      <rule context="$node[@type='biblio'][@key]">
         <assert test="matches(@key, '^(A11[0-9A-F]{5}\s)*A11[0-9A-F]{5}$')">A type value of 'biblio' must have at least one key, each starting with 'A11'</assert>
      </rule>
      <rule context="$node[@type='addenda'][@key]">
         <assert test="matches(@key, '^A12[0-9A-F]{5}$')">A type value of 'addenda' must have only one key, starting with 'A12'</assert>
      </rule>
      <rule context="$node[@type='place'][@key] | $node[@type='venue'][@key]">
         <assert test="matches(@key, '^A13[0-9A-F]{5}$')">A type value of 'place' must have only one key, starting with 'A13'</assert>
      </rule>
      <rule context="$node[@type='places'][@key]">
         <assert test="matches(@key, '^(A13[0-9A-F]{5}\s)*A13[0-9A-F]{5}$')">A type value of 'places' must have at least one key, each starting with 'A13'</assert>
      </rule>
      <rule context="$node[@type='mixed'][@key]">
         <assert test="count(distinct-values(for $i in tokenize(@key, '\s+') return substring($i, 1, 3))) gt 1">A type value of 'mixed' must have keys referring to different document types</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-importName-34">
      <rule context="tei:persName | tei:orgName | tei:placeName">
         <report test="(@type='import') and parent::node()/@status[.='proposed']"
                 role="info">This element should be deleted after checking this record.</report>
         <report test="(@type='import') and parent::node()/@status[.='candidate']"
                 role="warning">This element should be deleted after checking this record.</report>
         <report test="(@type='import') and parent::node()/@status[.='approved']"
                 role="error">This element has to be deleted before publishing!</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-quotation-rend-values-35">
      <rule context="*:q[@rend]/@rend | *:quote[@rend]/@rend">
         <report test="contains(.,'none')">The value 'none' is not allowed at <value-of select="node-name()"/>.</report>
      </rule>
      <rule context="*:q[@rendLeft]/@rendLeft | *:quote[@rendLeft]/@rendLeft | *:q[@rendRight]/@rendRight | *:quote[@rendRight]/@rendRight">
         <report test="contains(.,'none') and not(. = 'none')">If the value 'none' is used, no other specification are allowed.</report>
      </rule>
      <rule context="*:q[@rend]/@rend | *:quote[@rend]/@rend | *:q[@rendLeft]/@rendLeft | *:quote[@rendLeft]/@rendLeft | *:q[@rendRight]/@rendRight | *:quote[@rendRight]/@rendRight">
         <report test="(contains(.,'single') and contains(.,'double')) or (contains(., 'up') and contains(.,'down'))">Please check the values at the attriute <value-of select="node-name()"/>.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-quotation-rend-attributes-36">
      <rule context="*:q[@rend] | *:quote[@rend] | *:q[@rendLeft] | *:quote[@rendLeft] | *:q[@rendRight] | *:quote[@rendRight]">
         <report test="(@rend and @rendLeft) or (@rend and @rendLeft)">The attribute rend is not allowed if rendLeft or rendRight is used.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-rendIfBreakNo-38">
      <rule context="tei:lb | tei:pb">
         <assert test="not(@*) or @n or @break or (@break and @rend)">@rend is only allowed if @break is used.</assert>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-reportLBfollowsPB-39">
      <rule context="tei:pb">
         <report test=".[following::lb]">A lb-element right after a pb-element is senseless.</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-seriesTitleRequirements-40">
      <rule context="tei:fileDesc/tei:titleStmt/tei:title[@level='s']">
         <let name="seriesTitleA04" value="'Henze-Digital, Briefedition'"/>
         <let name="seriesTitleA05" value="'Aktuelle Nachrichten von Henze-Digital'"/>
         <let name="seriesTitleA02"
              value="'Henze-Digital, literarische Werke, Digitale Edition'"/>
         <report test="ancestor::tei:TEI[starts-with(@xml:id,'A04')] and not(. = $seriesTitleA04)">The correct series title for postals is "<value-of select="$seriesTitleA04"/>".</report>
         <report test="ancestor::tei:TEI[starts-with(@xml:id,'A05')] and not(. = $seriesTitleA05)">The scorrect eries title for News is "<value-of select="$seriesTitleA05"/>".</report>
         <report test="ancestor::tei:TEI[starts-with(@xml:id,'A02')] and not(. = $seriesTitleA02)">The series title must be "<value-of select="$seriesTitleA02"/>".</report>
      </rule>
   </pattern>
   <pattern id="schematron-constraint-hendiPlaces-styleguide-document-node-content-41">
      <rule context="document-node()">
         <report test="count(processing-instruction()) ne 2">Henze-Digital styleguide error: there should exactly be two processing instructions before the root element</report>
         <report test="comment()">Henze-Digital styleguide error: there should be no comments outside the root element</report>
      </rule>
   </pattern>
</schema>
