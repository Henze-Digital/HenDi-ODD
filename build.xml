<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="HenDi-ODD" default="letters">
    
    <!-- import default properties from file -->
    <property file="local.build.properties"/>
    <property file="build.properties"/>
    
    <condition property="lang" value="${lang}" else="de">
        <isset property="lang"/>
    </condition>
    
    <target name="test" depends="letters, orgs"/>
    <target name="works" depends="worksMEI, worksTEI"/>
    <target name="tei" depends="letters, orgs, places, biblio, news, thematicCommentaries, tei-html-problems"/>
    <target name="tei-html-problems" depends="persons, reviews, documents, var, worksTEI"/>
    <target name="mei" depends="worksMEI"/>
    <target name="all" depends="tei, mei, text"/>
    
    <target name="dir.check">
        <condition property="dir.exists">
            <available file="${compiledODD.dir}" type="dir"/>
        </condition>
    </target>
    
    <target name="init-dirs" depends="dir.check" unless="dir.exists">
        <mkdir dir="${compiledODD.dir}"/>
    </target>
    
    <target name="init" description="initializes the build, e.g. downloads saxon">
        <antcall target="init-dirs"/>
        <available property="saxon-available" file="${basedir}/lib/saxon/saxon-he-10.5.jar"/>
        <antcall target="saxon-prepare"/>
        
        <property name="tei.source" value="${basedir}/lib/tei-${tei.source.version}/xml/tei/odd/p5subset.xml"/>
        <available property="tei.source.available" file="${tei.source}"/>
        <antcall target="tei-source-prepare"/>
        
        <property name="mei.source" value="${basedir}/lib/music-encoding-${mei.source.version}/source/mei-source.xml"/>
        <available property="mei.source.available" file="${mei.source}"/>
        <antcall target="mei-source-prepare"/>
        <echo>initialized</echo>
    </target>
    
    <target name="saxon-download" unless="${saxon-available}">
        <mkdir dir="temp"/>
        <get src="https://sourceforge.net/projects/saxon/files/Saxon-HE/10/Java/SaxonHE10-8J.zip/download" dest="temp/"/>
        <!-- TODO check for newer releases-->
    </target>
    
    <target name="saxon-prepare" depends="saxon-unzip" unless="${saxon-available}">
        <delete dir="temp/"/>
    </target>
    
    <target name="saxon-unzip" depends="saxon-download" unless="${saxon-available}">
        <mkdir dir="lib"/>
        <unzip src="temp/download" overwrite="true" dest="lib/saxon/"/>
    </target>
    
    <path id="hendi.odd.classpath">
        <pathelement path="${basedir}/lib/saxon/saxon-he-10.5.jar"/>
    </path>
    
    <target name="tei-source-download" unless="${tei.source.available}">
        <mkdir dir="temp"/>
        <get src="https://downloads.sourceforge.net/project/tei/TEI-P5-all/tei-${tei.source.version}.zip" dest="temp/"/>
        <!-- TODO check for newer releases-->
    </target>
    
    <target name="tei-source-prepare" depends="tei-source-unzip" unless="${tei.source.available}">
        <delete dir="temp/"/>
    </target>
    
    <target name="tei-source-unzip" depends="tei-source-download" unless="${tei.source.available}">
        <mkdir dir="lib"/>
        <unzip src="temp/tei-${tei.source.version}" overwrite="true" dest="lib/tei-${tei.source.version}"/>
    </target>
    
    <target name="mei-source-download" unless="${mei.source.available}">
        <mkdir dir="temp"/>
        <get src="https://github.com/music-encoding/music-encoding/archive/refs/tags/v${mei.source.version}.zip" dest="temp/"/>
        <!-- TODO check for newer releases-->
    </target>
    
    <target name="mei-source-prepare" depends="mei-source-unzip" unless="${mei.source.available}">
        <delete dir="temp/"/>
    </target>
    
    <target name="mei-source-unzip" depends="mei-source-download" unless="${mei.source.available}">
        <mkdir dir="lib"/>
        <unzip src="temp/v${mei.source.version}.zip" overwrite="true" dest="lib/"/>
    </target>
    
    <target name="clean">
        <delete>
           <fileset dir="schema/en">
              <include name="*.isosch"/>
           </fileset>
            <fileset dir="schema/de">
                <include name="*.isosch"/>
            </fileset>
        </delete>
    </target>
    
    <target name="biblio" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhBiblio.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhBiblio.isosch"/>
            <param name="selectedSchema" value="hwhBiblio"/>
        </antcall>
    	<property name="schema.outputFileRNG" value="${basedir}/schema/${lang}/hwhBiblio.rng"/>
    	<property name="schema.name" value="hwhBiblio"/>
    	<antcall target="check-rng-output"/>
    </target>
    
    <target name="documents" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhDocuments.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhDocuments.isosch"/>
            <param name="selectedSchema" value="hwhDocuments"/>
        </antcall>
    </target>
    
	<target name="text" depends="init">
		<antcall target="process-text">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de-text.xml"/>
		</antcall>
	</target>
	
    <target name="letters" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhLetters.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhLetters.isosch"/>
            <param name="selectedSchema" value="hwhLetters"/>
        </antcall>
    </target>
    
    <target name="news" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhNews.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhNews.isosch"/>
            <param name="selectedSchema" value="hwhNews"/>
        </antcall>
    </target>
    
    <target name="orgs" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhOrgs.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhOrgs.isosch"/>
            <param name="selectedSchema" value="hwhOrgs"/>
        </antcall>
    </target>
    
    <target name="persons" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhPersons.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhPersons.isosch"/>
            <param name="selectedSchema" value="hwhPersons"/>
        </antcall>
    </target>
    
    <target name="places" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhPlaces.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhPlaces.isosch"/>
            <param name="selectedSchema" value="hwhPlaces"/>
        </antcall>
    </target>
    
    <target name="reviews" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhReviews.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhReviews.isosch"/>
            <param name="selectedSchema" value="hwhReviews"/>
        </antcall>
    </target>
    
    <target name="thematicCommentaries" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhThematicCommentaries.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhThematicCommentaries.isosch"/>
            <param name="selectedSchema" value="hwhThematicCommentaries"/>
        </antcall>
    </target>
    
    <target name="var" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhVar.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhVar.isosch"/>
            <param name="selectedSchema" value="hwhVar"/>
        </antcall>
    </target>
    
    <target name="worksMEI" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhWorksMEI.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhWorksMEI.isosch"/>
            <param name="selectedSchema" value="hwhWorksMEI"/>
            <param name="source" value="${mei.source}"/>
        </antcall>
    </target>
    
    <target name="worksTEI" depends="init">
        <antcall target="process">
            <param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
            <param name="outputFileRNG" value="${basedir}/schema/${lang}/hwhWorksTEI.rng"/>
            <param name="outputFileSchematron" value="${basedir}/schema/${lang}/hwhWorksTEI.isosch"/>
            <param name="selectedSchema" value="hwhWorksTEI"/>
            <param name="source" value="${mei.source}"/>
        </antcall>
    </target>
    
    <!-- processing schema -->
    <target name="process">
        
        <basename property="inputFile.basename" file="${inputFile}" suffix=".xml"/>
        <!-- TEI is considered default source -->
        <condition property="source" value="${source}" else="${tei.source}">
            <isset property="source"/>
        </condition>
        <sequential>
            <echo>Expanding ODD file</echo>
            <xslt force="yes" style="${stylesheets.dir}/odds/odd2odd.xsl" in="${inputFile}" out="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" classpathref="hendi.odd.classpath">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="defaultSource" expression="${source}"/>
                <param name="selectedSchema" expression="${selectedSchema}"/>
            </xslt>
            
            <echo>Generate html guidelines</echo>
            <xslt force="yes" style="${stylesheets.dir}/odds/odd2html.xsl" 
                in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="guidelines-html/${inputFile.basename}-${selectedSchema}.html" classpathref="hendi.odd.classpath" failontransformationerror="no">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="defaultSource" expression="${source}"/>
                <param name="selectedSchema" expression="${selectedSchema}"/>
            </xslt>
            
            <echo>Creating RelaxNG schema</echo>
            <xslt force="yes" style="${stylesheets.dir}/profiles/default/relaxng/to.xsl" 
                in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="${outputFileRNG}" classpathref="hendi.odd.classpath">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
                </factory>
                <param name="inputDir" expression="${basedir}/"/>
                <!-- supply name of language-->
                <param name="lang" expression="${lang}" if="lang"/>
                <param name="doclang" expression="${lang}" if="lang"/>
                <param name="documentationLanguage" expression="${lang}" if="lang"/>
                <!-- emit some diagnostics"-->
                <param name="debug" expression="${debug}" if="debug"/>
                <!-- be verbose-->
                <param name="verbose" expression="${verbose}" if="verbose"/>
            </xslt>
            
            <echo>Extracting Schematron rules</echo>
            <xslt processor="trax" force="yes" 
                style="${stylesheets.dir}/profiles/default/schematron/to.xsl" 
                in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="${outputFileSchematron}" classpathref="hendi.odd.classpath">
                <factory name="net.sf.saxon.TransformerFactoryImpl"/>
            </xslt>
        </sequential>
    </target>
    
    <target name="process-text">
    	<basename property="inputFile.basename" file="${inputFile}" suffix=".xml"/>
    	<!-- TEI is considered default source -->
    	<condition property="source" value="${source}" else="${tei.source}">
    		<isset property="source"/>
    	</condition>
    	<sequential>
	    	<echo>Expanding ODD file (text)</echo>
	    	<xslt force="yes" style="${stylesheets.dir}/odds/odd2odd.xsl" 
	    	    in="${inputFile}" out="${compiledODD.dir}/${inputFile.basename}.compiled.xml" classpathref="hendi.odd.classpath">
	    		<factory name="net.sf.saxon.TransformerFactoryImpl">
	    			<attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
	    		</factory>
	    		<param name="lang" expression="${lang}" if="lang"/>
	    		<param name="defaultSource" expression="${source}"/>
	    	</xslt>
    	</sequential>
    	
    	<echo>copy output to hendi-data repo.</echo>
    	<echo>Attention: This runs only locally and is hard-coded!</echo>
    	<copy file="compiled-ODD/guidelines-de-text.compiled.xml" tofile="../henze-digital/var/A0700xxx/A070001F.xml" overwrite="yes"/>
    </target>
	
	<target name="check-rng-output">
		<echo>Test if relaxNG is valid.</echo>
		<taskdef name="jing" classpath="resources/jing.jar" classname="com.thaiopensource.relaxng.util.JingTask"/>
		<sequential>
			<echo level="info">Validating RelaxNG output file with RelaxNG.</echo>
			<jing rngfile="resources/relaxng.rng" file="${schema.outputFileRNG}"/>
		</sequential>
	</target>
</project>
