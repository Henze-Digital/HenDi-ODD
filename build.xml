<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." name="HenDi-ODD" default="all">
	
	<!-- import default properties from file -->
	<property file="local.build.properties"/>
	<property file="build.properties"/>
	
	<condition property="lang" value="${lang}" else="de">
		<isset property="lang"/>
	</condition>
	
	
	<target name="superset" depends="hendiAll"/>
	<target name="tei" depends="hendiBiblio, hendiDocuments, hendiLetters, hendiNews, hendiOrgs, hendiPersons, hendiPlaces, hendiThematicCommentaries, hendiVar, hendiWorksTEI, hendiWritings"/>
	<target name="mei" depends="hendiWorksMEI"/>
	<target name="all" depends="superset, tei, mei"/>
	
	<target name="dir.check">
		<condition property="dir.exists">
			<available file="${compiledODD.dir}" type="dir"/>
		</condition>
	</target>
	
	<target name="init-dirs" depends="dir.check" unless="dir.exists">
		<mkdir dir="${compiledODD.dir}"/>
	</target>
	
	<target name="init" description="initializes the build, e.g. downloads saxon">
		<antcall target="init-dirs"/>
		<available property="saxon-available" file="${basedir}/lib/saxon/saxon-he-10.5.jar"/>
		<antcall target="saxon-prepare"/>
		
		<property name="tei.source" value="${basedir}/lib/tei-${tei.source.version}-subset/p5subset.xml"/>
		<available property="tei.source.available" file="${tei.source}"/>
		<antcall target="tei-source-prepare"/>
		
		<property name="mei.source" value="${basedir}/lib/music-encoding-${mei.source.version}/source/mei-source.xml"/>
		<available property="mei.source.available" file="${mei.source}"/>
		<antcall target="mei-source-prepare"/>
		<echo>initialized</echo>
	</target>
	
	<target name="saxon-download" unless="${saxon-available}">
		<mkdir dir="temp"/>
		<get src="https://sourceforge.net/projects/saxon/files/Saxon-HE/10/Java/SaxonHE10-8J.zip/download" dest="temp/"/>
		<!-- TODO check for newer releases-->
	</target>
	
	<target name="saxon-prepare" depends="saxon-unzip" unless="${saxon-available}">
		<delete dir="temp/"/>
	</target>
	
	<target name="saxon-unzip" depends="saxon-download" unless="${saxon-available}">
		<mkdir dir="lib"/>
		<unzip src="temp/download" overwrite="true" dest="lib/saxon/"/>
	</target>
	
	<path id="hendi.odd.classpath">
		<pathelement path="${basedir}/lib/saxon/saxon-he-10.5.jar"/>
	</path>
	
	<target name="tei-source-download" unless="${tei.source.available}">
		<mkdir dir="temp"/>
		<get src="https://downloads.sourceforge.net/project/tei/TEI-P5-all/tei-${tei.source.version}.zip" dest="temp/"/>
		<!-- TODO check for newer releases-->
	</target>
	
	<target name="tei-source-prepare" depends="tei-source-download" unless="${tei.source.available}">
		<mkdir dir="lib"/>
		<unzip src="temp/tei-${tei.source.version}.zip" overwrite="true" dest="lib/"/>
	</target>
	
	<target name="mei-source-download" unless="${mei.source.available}">
		<mkdir dir="temp"/>
		<get src="https://github.com/music-encoding/music-encoding/archive/refs/tags/v${mei.source.version}.zip" dest="temp/"/>
		<!-- TODO check for newer releases-->
	</target>
	
	<target name="mei-source-prepare" depends="mei-source-unzip" unless="${mei.source.available}">
		<delete dir="temp/"/>
	</target>
	
	<target name="mei-source-unzip" depends="mei-source-download" unless="${mei.source.available}">
		<mkdir dir="lib"/>
		<unzip src="temp/v${mei.source.version}.zip" overwrite="true" dest="lib/"/>
	</target>
	
	<target name="clean">
		<delete>
			<fileset dir="schema/en">
				<include name="*.isosch"/>
			</fileset>
			<fileset dir="schema/de">
				<include name="*.isosch"/>
			</fileset>
		</delete>
	</target>
	
	<target name="hendiAll" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiAll.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiAll.isosch"/>
			<param name="selectedSchema" value="hendiAll"/>
		</antcall>
		
		<echo>Creating CITATION.cff</echo>
		<copy file="CITATION.cff.tmpl" tofile="CITATION.cff" filtering="true" overwrite="true">
			<filterset>
				<filter token="project.app" value="${project.app}"/>
				<filter token="project.version" value="${project.version}"/>
				<filter token="release.doi" value="${release.doi}"/>
				<filter token="release.date" value="${release.date}"/>
				<filter token="release.year" value="${release.year}"/>
			</filterset>
		</copy>
	</target>
	
	<target name="hendiBiblio" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiBiblio.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiBiblio.isosch"/>
			<param name="selectedSchema" value="hendiBiblio"/>
		</antcall>
	</target>
	
	<target name="hendiDocuments" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiDocuments.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiDocuments.isosch"/>
			<param name="selectedSchema" value="hendiDocuments"/>
		</antcall>
	</target>
	
	
	<target name="hendiLetters" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiLetters.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiLetters.isosch"/>
			<param name="selectedSchema" value="hendiLetters"/>
		</antcall>
	</target>
	
	<target name="hendiNews" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiNews.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiNews.isosch"/>
			<param name="selectedSchema" value="hendiNews"/>
		</antcall>
	</target>
	
	<target name="hendiOrgs" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiOrgs.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiOrgs.isosch"/>
			<param name="selectedSchema" value="hendiOrgs"/>
		</antcall>
	</target>
	
	<target name="hendiPersons" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiPersons.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiPersons.isosch"/>
			<param name="selectedSchema" value="hendiPersons"/>
		</antcall>
	</target>
	
	<target name="hendiPlaces" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiPlaces.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiPlaces.isosch"/>
			<param name="selectedSchema" value="hendiPlaces"/>
		</antcall>
	</target>
	
	<target name="hendiThematicCommentaries" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiThematicCommentaries.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiThematicCommentaries.isosch"/>
			<param name="selectedSchema" value="hendiThematicCommentaries"/>
		</antcall>
	</target>
	
	<target name="hendiVar" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiVar.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiVar.isosch"/>
			<param name="selectedSchema" value="hendiVar"/>
		</antcall>
	</target>
	
	<target name="hendiWorksMEI" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiWorksMEI.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiWorksMEI.isosch"/>
			<param name="selectedSchema" value="hendiWorksMEI"/>
			<param name="source" value="${mei.source}"/>
		</antcall>
	</target>
	
	<target name="hendiWorksTEI" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiWorksTEI.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiWorksTEI.isosch"/>
			<param name="selectedSchema" value="hendiWorksTEI"/>
		</antcall>
	</target>
	
	<target name="hendiWritings" depends="init">
		<antcall target="process">
			<param name="inputFile" value="${basedir}/src/Guidelines/guidelines-de.xml"/>
			<param name="outputFileRNG" value="${basedir}/schema/${lang}/hendiWritings.rng"/>
			<param name="outputFileSchematron" value="${basedir}/schema/${lang}/hendiWritings.isosch"/>
			<param name="selectedSchema" value="hendiWritings"/>
		</antcall>
	</target>
	
	<!-- processing schema -->
	<target name="process">
		
		<basename property="inputFile.basename" file="${inputFile}" suffix=".xml"/>
		<!-- TEI is considered default source -->
		<condition property="source" value="${source}" else="${tei.source}">
			<isset property="source"/>
		</condition>
		<sequential>
			<echo>Expanding ODD file</echo>
			<xslt force="yes" style="${stylesheets.dir}/odds/odd2odd.xsl" in="${inputFile}" out="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" classpathref="hendi.odd.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl">
					<attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
				</factory>
				<param name="lang" expression="${lang}" if="lang"/>
				<param name="defaultSource" expression="${source}"/>
				<param name="verbose" expression="true"/>
<!--				<param name="summaryDoc" expression="false"/>-->
				<param name="selectedSchema" expression="${selectedSchema}"/>
			</xslt>
			
			<echo>Creating RelaxNG schema</echo>
			<xslt force="yes" style="${stylesheets.dir}/profiles/default/relaxng/to.xsl" 
				in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="${outputFileRNG}" classpathref="hendi.odd.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl">
					<attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
				</factory>
				<param name="inputDir" expression="${basedir}/"/>
				<!-- supply name of language-->
				<param name="lang" expression="${lang}" if="lang"/>
				<param name="doclang" expression="${lang}" if="lang"/>
				<param name="documentationLanguage" expression="${lang}" if="lang"/>
				<!-- emit some diagnostics"-->
				<param name="debug" expression="${debug}" if="debug"/>
				<!-- be verbose-->
				<param name="verbose" expression="${verbose}" if="verbose"/>
			</xslt>
			
			<echo>Extracting Schematron rules</echo>
			<xslt processor="trax" force="yes" 
				style="${stylesheets.dir}/profiles/default/schematron/to.xsl" 
				in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="${outputFileSchematron}" classpathref="hendi.odd.classpath">
				<factory name="net.sf.saxon.TransformerFactoryImpl"/>
			</xslt>
		</sequential>
	</target>
	
	<target name="process-guidelines-html">
		<echo>Generate html guidelines</echo>
		<basename property="inputFile.basename" file="${inputFile}" suffix=".xml"/>
		<!-- TEI is considered default source -->
		<condition property="source" value="${source}" else="${tei.source}">
			<isset property="source"/>
		</condition>
		
		<xslt force="yes" style="${stylesheets.dir}/odds/odd2html.xsl" 
			in="${compiledODD.dir}/${inputFile.basename}-${selectedSchema}.compiled.xml" out="guidelines-html/${inputFile.basename}-${selectedSchema}.html" classpathref="hendi.odd.classpath" failontransformationerror="no">
			<factory name="net.sf.saxon.TransformerFactoryImpl">
				<attribute name="http://saxon.sf.net/feature/xinclude-aware" value="true"/>
			</factory>
			<param name="lang" expression="${lang}" if="lang"/>
			<param name="defaultSource" expression="${source}"/>
			<param name="selectedSchema" expression="${selectedSchema}"/>
		</xslt>
	</target>
	
	<target name="zippingForPublishing" if="${publishing}">
		<echo>Creating the xar Package (zipping) for publishing.</echo>
		<zip destfile="./hendi-pkg-odd/${project.app}-${project.version}.xar">
			<fileset dir=".">
				<include name="**/*.*"/>
				<exclude name=".git/"/>
				<exclude name="lib/"/>
				<exclude name="resources/"/>
				<exclude name="submodules/"/>
				<exclude name=".git*"/>
				<exclude name=".DS_Store"/>
				<exclude name="*.xpr"/>
				<exclude name="*.tmpl"/>
			</fileset>
		</zip>
	</target>
	
</project>
